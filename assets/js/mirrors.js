/* eslint-disable no-console */
'use strict';

const dayjs = window.dayjs;
const axios = window.axios;

let lists = [];
let timer = null;
let progress = 0;

const generate_button = document.getElementById('generate-list');
const scratch = document.getElementById('scratch');
const link = document.createElement('a');
const status_bar = document.createElement('div');
link.innerText = 'Generate APT Configuration';
link.setAttribute('href', 'javascript:void(0);');
link.setAttribute('id', 'generate-btn');
link.addEventListener('click', startMeasurement);
status_bar.style = 'display: none;';
status_bar.id = 'status-bar';
generate_button.appendChild(link);
generate_button.appendChild(status_bar);

function updateProgress() {
    status_bar.innerText = `Testing your speed to the mirrors... ${progress}%`;
    progress += 1;
    if (progress > 100) {
        clearInterval(timer);
        status_bar.style = 'display: none;';
        link.style = 'display: block;';
    }
}
function download(filename, text) {
    const pom = document.createElement('a');
    const blob = new Blob([text], {type: 'text/plain;charset=utf-8'});
    pom.setAttribute('style', 'display: none;');
    pom.setAttribute('href', URL.createObjectURL(blob));
    pom.setAttribute('download', filename);
    if (document.createEvent) {
        const event = document.createEvent('MouseEvents');
        event.initEvent('click', true, true);
        pom.dispatchEvent(event);
    } else {
        pom.click();
    }
}
function fetchSample(url, callback) {
    // const sri = 'sha256-mJAFZPtNnH07Y/RGhsW4oSCvlKUfxspZXhQG1djMBBY=';
    const current = document.createElement('script');
    current.type = 'text/javascript';
    current.async = true;
    current.src = url;
    // current.integrity = sri;
    current.crossorigin = 'anonymous';
    current.onload = callback;
    scratch.appendChild(current);
}
function checkSpeed(url, name, lag) {
    const start = Date.now();
    scratch.innerHTML = '';
    fetchSample(url + '.repotest', function () {
        const score = (lag / 3600) * 0.39 + (Date.now() - start) * 0.61;
        lists.push({
            name: name,
            score: score,
            url: url
        });
    });
}
function genList() {
    lists.sort((a, b) => a.score - b.score);
    const final_result = lists;
    let output = '# Generated by AOSC Mirror Service\n';
    for (let i = 0; i < final_result.length; i++) {
        const prefix = (i ? '# ' : '');
        output += `# ${final_result[i].name}\n${prefix}deb ${final_result[i].url}/debs stable main\n#\n`;
    }
    download('sources.list', output);
}
function startMeasurement() {
    lists = [];
    axios
        .get('/api/mirrors')
        .then(function (response) {
            document.getElementById('generate-btn').style = 'display: none;';
            document.getElementById('status-bar').style = 'display: block;';
            populateData(response);
            setTimeout(genList, 10000);
            timer = setInterval(updateProgress, 100);
            const mirrors = response.data.mirrors;
            const reference = response.data.ref;
            for (let mirror of mirrors) {
                checkSpeed(mirror.url, mirror.name, reference - mirror.updated);
            }
        })
        .catch(function (error) {
            document.getElementById('generate-btn').style = 'display: none;';
            status_bar.style = 'display: block;';
            status_bar.innerText = `Error occurred: ${error.message}. Please refresh the page and try again.`;
            console.error(error);
        });
}
function populateData(response) {
    if (!response.data || response.data.length < 1) {
        return;
    }
    const table = document.getElementById('mirrors');
    const mirror_data = response.data.mirrors;
    const reference = response.data.ref;
    table.innerHTML = '';
    for (let index = 0; index < mirror_data.length; index++) {
        const this_row = mirror_data[index];
        const this_node = document.createElement('tr');
        const difference = reference - this_row.updated;
        let severity = 'is-latest';
        if (difference > 7200)
            severity = (difference < 28800) ? 'is-behind' : 'is-very-behind';
        let difference_human = difference > 0 ? dayjs.duration(difference * 1000).humanize() + ' behind' : 'Up-to-date';
        if (this_row.updated < 0) {
            difference_human = 'Unknown';
            severity = 'is-unknown';
        }
        this_node.innerHTML = `<td style="width: 30%;">${this_row.region}</td><td style="width: 45%;"><a href="${this_row.url}">${this_row.name}</a></td><td style="width: 20%;"><div class="${severity}">&nbsp;${difference_human}</div></td>`;
        table.appendChild(this_node);
    }
    document.getElementById('status').style = 'display: block;';
}
axios
    .get('/api/mirrors')
    .then(populateData)
    .catch(function (error) {
        console.error(error);
    });
